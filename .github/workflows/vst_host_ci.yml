---

name: Build Vst Host

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release

jobs:
  build_windows_configuration:

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake "${{github.workspace}}\VstHost_VisualC++" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_GMOCK=0
          cd ..

      - name: Build C++ Code
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 8

      - name: Run C++ Unit Tests
        run: |
          cd ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests.exe
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests.exe

      - name: Run Python Unit Tests
        run: |
          cp ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3 ${{github.workspace}}\VstHost_Python\UnitTests\
          cp ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/AudioHostLib.dll ${{github.workspace}}\VstHost_Python\UnitTests\
          python -m unittest discover ${{github.workspace}}/VstHost_Python/UnitTests "test_*.py"

      - name: Clean Up After Build
        run: |
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests.exe
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests.exe
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/VstHost.log
          rm -r -fo ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/data

      # - name: Archive Build Artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: windows_x64
      #     path: ${{ github.workspace }}/build/bin/${{env.BUILD_TYPE}}

  build_linux_configuration:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake "${{github.workspace}}\VstHost_VisualC++" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_GMOCK=0
          cd ..

      - name: Build C++ Code
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 8

      - name: Run C++ Unit Tests
        run: |
          cd ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests

      - name: Run Python Unit Tests
        run: |
          cp -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3 ${{github.workspace}}/VstHost_Python/UnitTests/adelay.vst3
          cp ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/libAudioHostLib.so ${{github.workspace}}/VstHost_Python/UnitTests/
          python -m unittest discover ${{github.workspace}}/VstHost_Python/UnitTests "test_*.py"

      - name: Clean Up After Build
        run: |
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests
          rm -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/VstHost.log
          rm -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/data

      # - name: Archive Build Artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: linux_x64
      #     path: ${{ github.workspace }}/build/bin/${{env.BUILD_TYPE}}


  build_mac_os_configuration:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -G Xcode ${{github.workspace}}/VstHost_VisualC++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=gcc -DBUILD_GMOCK=0
          cd ..

      - name: Build C++ Code
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 8 --resolve-package-references on

      - name: Run C++ Unit Tests
        run: |
          cd ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests
          ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests

      - name: Run Python Unit Tests
        run: |
          cp -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3 ${{github.workspace}}/VstHost_Python/UnitTests/adelay.vst3
          cp ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/libAudioHostLib.dylib ${{github.workspace}}/VstHost_Python/UnitTests/
          python -m unittest discover ${{github.workspace}}/VstHost_Python/UnitTests "test_*.py"

      - name: Clean Up After Build
        run: |
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/ApiUnitTests
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/OfflineToolsUnitTests
          rm -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/adelay.vst3
          rm ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/VstHost.log
          rm -fr ${{github.workspace}}/build/bin/${{env.BUILD_TYPE}}/data

      # - name: Archive Build Artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: mac_os
      #     path: ${{ github.workspace }}/build/bin/${{env.BUILD_TYPE}}

  build_android_configuration:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: nttld/setup-ndk@v1
        id: install-ndk
        with:
          ndk-version: r24
          add-to-path: false
      
      - name: Configure CMake and Build C++ .so for armeabi-v7a

        run: |
          export ANDROID_NDK_PATH=${{ steps.install-ndk.outputs.ndk-path }}
          cmake "${{github.workspace}}\VstHost_VisualC++" -B build_armeabi-v7a -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DANDROID_PLATFORM=android-28 -D ANDROID_ABI=armeabi-v7a -DANDROID_BUILD=True
          cd build_armeabi-v7a
          ${{ steps.install-ndk.outputs.ndk-path }}/prebuilt/linux-x86_64/bin/make
          cd ..

      - name: Configure CMake and Build C++ .so for arm64-v8a

        run: |
          export ANDROID_NDK_PATH=${{ steps.install-ndk.outputs.ndk-path }}
          cmake "${{github.workspace}}\VstHost_VisualC++" -B build_arm64-v8a -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DANDROID_PLATFORM=android-28 -D ANDROID_ABI=arm64-v8a -DANDROID_BUILD=True
          cd build_arm64-v8a
          ${{ steps.install-ndk.outputs.ndk-path }}/prebuilt/linux-x86_64/bin/make
          cd ..

      - name: Configure CMake and Build C++ .so for x86

        run: |
          export ANDROID_NDK_PATH=${{ steps.install-ndk.outputs.ndk-path }}
          cmake "${{github.workspace}}\VstHost_VisualC++" -B build_x86 -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DANDROID_PLATFORM=android-28 -D ANDROID_ABI=x86 -DANDROID_BUILD=True
          cd build_x86
          ${{ steps.install-ndk.outputs.ndk-path }}/prebuilt/linux-x86_64/bin/make
          cd ..

      - name: Configure CMake and Build C++ .so for x86_64

        run: |
          export ANDROID_NDK_PATH=${{ steps.install-ndk.outputs.ndk-path }}
          cmake "${{github.workspace}}\VstHost_VisualC++" -B build_x86_64 -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DANDROID_PLATFORM=android-28 -D ANDROID_ABI=x86_64 -DANDROID_BUILD=True
          cd build_x86_64
          ${{ steps.install-ndk.outputs.ndk-path }}/prebuilt/linux-x86_64/bin/make
          cd ..
          ls -la

      - name: Generate Release APK
        run: |
          cd VstHost_Android
          touch app/version.properties
          echo "VERSION_CODE=1.0.0" > app/version.properties
          chmod +x gradlew
          ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Rename Final Apk
        id: SetApkName
        run: |
          RELEASE_APK_PATH="$(echo ${{steps.sign_app.outputs.signedReleaseFile}} |sed -e 's/-signed.apk/.apk/')" 
          mv ${{ steps.sign_app.outputs.signedReleaseFile }} ${RELEASE_APK_PATH}
          echo "::set-output name=release-app-path::$RELEASE_APK_PATH"
